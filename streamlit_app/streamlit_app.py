import os
import streamlit as st
from rdkit.Chem import AllChem
from rdkit.Chem.Draw import ReactionToImage
import sys
from stmol import showmol
import py3Dmol
from streamlit_ketcher import st_ketcher
from biosynth_pipeline import biosynth_pipeline

# Redirect stdout to capture print statements
class StreamCapturer:
    def __init__(self, text_area):
        self.text_area = text_area
        self.original_stdout = sys.stdout

    def write(self, message):
        self.text_area.write(message)
        self.original_stdout.write(message)

def intro():
    st.write("Welcome to Biosynth Pipeline. This is a new synthesis planning software that has been developed to "
             "expand the design space of feasible pathways between simple, inexpensively available precursors,"
             "such as glucose or glycerol (a common biodesel waste product) and high-value, small-molecules,"
             "such as vinblastine (an anti-cancer therapeutic) or papaverine(an antispasmodic drug). This software"
             "has been developed by integrating two softwares - Retrotide and Pickaxe. Retrotide specializes in"
             "modular polyketide synthase retrobiosynthesis while Pickaxe is tailored towards singular"
             "enzymatic synthesis.")

    st.write("A key challenge in building this software was handling the vast number of pathways"
             "generated by Pickaxe, which we mitigated by training machine learning models to predict the feasibility of"
             "enzymatic reactions and consequently, rank suggested reactions as well as pathways.")

    st.write("There are two key pages on the streamlit_app - pathway selection and protein selection")


def pathway():

    st.title("Biosynth Pipeline")

    st.subheader('Start by drawing target molecule below:')
    target_smiles = st_ketcher()

    # dropdown menu for pathway sequence
    pathway_sequence_options = ["", "PKS first, non-PKS second", "non-PKS first PKS second"]
    pathway_sequence = st.selectbox("Select pathway sequence:", pathway_sequence_options)

    # dropdown menu for rule set selection
    rule_set_options = ["", "biological_generalized", "biological_intermediate", "chemical"]
    non_pks_rules = st.selectbox("Select rule for non-PKS reactions:",rule_set_options)

    # slider for the number of non-PKS steps
    non_pks_steps = st.slider("Select number of non-PKS steps:", 0 ,10)

    # slider for the number of cores to use
    num_cores = st.slider("Select number of computing cores to use:", 0, os.cpu_count())

    # dropdown menu for choosing to use the similarity sampling filter
    sim_sampling_filter_options = ["", "True", "False"]
    sim_sampling_filter_choice = st.selectbox("Select if similarity sampling will be used in each generation:",
                                              sim_sampling_filter_options)
    sampling_size = 0
    if sim_sampling_filter_choice == "True":
        sampling_size += st.slider("Select sampling size:",1, 10000)

    # dropdown menu for choosing similarity cutoffs filter
    sim_cutoff_options = ["", "True", "False"]
    sim_cutoff_choice = st.selectbox("Select if similarity cutoffs will be used in each generation:",
                                     sim_cutoff_options)
    if sim_cutoff_choice == "True":
        cutoff_list = []
        for i in range(0,int(non_pks_steps)):
            cutoff_val = st.selectbox(f"Select similarity cutoff for step {i+1}:",
                                      [0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])
            cutoff_list.append(cutoff_val)

    # dropdown menu for choosing PKS chain-release mechanism
    chain_release_mechanism_options = ["", "thiolysis"]
    chain_release_mechanism = st.selectbox("Select PKS chain release mechanism:",chain_release_mechanism_options)

    # slider for the number of PKS designs to try if first PKS and non-PKS sequence doesn't work
    max_designs = st.slider("Choose number of PKS designs to try:", 0, 10)

    # set relevant parameters and filepaths for biosynth pipeline
    remove_stereo = False
    cofactors_filepath = '../data/coreactants_and_rules/all_cofactors.tsv'
    known_metabolites_filepath = '../data/all_known_metabolites.txt'

    # initialize reaction feasibility prediction model for biosynth pipeline
    feasibility_model = '../models/updated_model_Apr28'
    feasibility_calibration_model = '../models/updated_model_Apr28_calibration'
    feasibility_cofactors = '../data/coreactants_and_rules/all_cofactors_updated.csv'
    fp_type = 'ecfp4'
    nBits = 2048
    max_species = 4
    cofactor_positioning = 'by_descending_MW'

    PX = biosynth_pipeline.feasibility_classifier(feasibility_model_path=feasibility_model,
                                                  calibration_model_path=feasibility_calibration_model,
                                                  cofactors_path=feasibility_cofactors,
                                                  fp_type=fp_type,
                                                  nBits=nBits,
                                                  max_species=max_species,
                                                  cofactor_positioning=cofactor_positioning)

    run_button = st.button("Run Biosynth Pipeline")

    if run_button:
        biosynth_pipeline_object = biosynth_pipeline.biosynth_pipeline(
                                                         pathway_sequence = pathway_sequence,
                                                         target_smiles = target_smiles,
                                                         feasibility_classifier = PX,
                                                         remove_stereo = remove_stereo,
                                                         known_metabolites = known_metabolites_filepath,
                                                         non_pks_cofactors = cofactors_filepath,
                                                         non_pks_rules = non_pks_rules,
                                                         non_pks_steps = int(non_pks_steps),
                                                         non_pks_cores = num_cores,
                                                         non_pks_sim_score_filter = sim_sampling_filter_choice,
                                                         non_pks_sim_score_cutoffs = sim_cutoff_choice,
                                                         non_pks_sim_sample = sampling_size,
                                                         non_pks_sim_sample_size = sampling_size)

        # ----- Start synthesis -----
        # Create a text area to display print statements
        print_area = st.empty()

        # Create a stream capturer to redirect print statements
        capturer = StreamCapturer(print_area)

        # Use the capturer to redirect print statements
        sys.stdout = capturer

        with st.spinner('Running PKS biosynthesis. Please wait.'):
            display_msg = biosynth_pipeline_object.run_pks_synthesis(pks_release_mechanism = chain_release_mechanism)
            st.write(display_msg)
        st.success('PKS biosynthesis complete', icon="✅")

        with st.spinner('Running non-PKS biosynthesis. Please wait.'):
            non_pks_pathways = biosynth_pipeline_object.run_non_pks_synthesis_post_pks(max_designs = max_designs)

        st.success('non-PKS biosynthesis complete', icon="✅")
        non_pks_pathways = biosynth_pipeline_object.rank_non_pks_pathways(non_pks_pathways)

        for i,pathway_key in enumerate(non_pks_pathways.keys()):
            with st.expander(f'Click to expand Pathway {i+1} with net feasibility: '
                             f'{non_pks_pathways[pathway_key]["net feasibility"]}'):

                st.write(f"Number of intermediates: "
                         f"{non_pks_pathways[pathway_key]['num_intermediates']}")

                st.write(f"Number of intermediates in biological databases: "
                         f"{non_pks_pathways[pathway_key]['num_known_intermediates']}")

                st.write(f"Number of intermediates in known biological databases: "
                         f"{non_pks_pathways[pathway_key]['proportion_known_intermediates']}")

                if len(non_pks_pathways[pathway_key]['reaction rules']) == 1:
                    st.write(f"Reaction rule: "
                             f"{non_pks_pathways[pathway_key]['reaction rules'][0]}")

                else:
                    st.write(f"Reaction rule: "
                             f"{non_pks_pathways[pathway_key]['reaction rules'][0]} or"
                             f"{non_pks_pathways[pathway_key]['reaction rules'][1]}")

                for rxn in non_pks_pathways[pathway_key]['reactions (SMILES)']:
                    reactant_smiles = []
                    product_smiles = []

                    lhs_species = rxn.split(' => ')[0]
                    rhs_species = rxn.split(' => ')[1]

                    for species in lhs_species.split(' + '):
                        stoichiometry = int(species[1])
                        for s in range(0,stoichiometry):
                            reactant_smiles.append(species[4:])

                    for species in rhs_species.split(' + '):
                        stoichiometry = int(species[1])
                        for s in range(0,stoichiometry):
                            product_smiles.append(species[4:])

                    reactions = [AllChem.ReactionFromSmarts(f"{reactant}>>{product}") for reactant, product in
                                 zip(reactant_smiles, product_smiles)]

                    for i, reaction in enumerate(reactions):
                        st.image(ReactionToImage(reaction), caption=f"RDKit Reaction {i + 1}", use_column_width=True)

        #non_pks_pathways = biosynth_pipeline_object.calc_pathway_thermo(non_pks_pathways, ub=1e-2, lb=1e-4)

def proteins():
    view = py3Dmol.view(width=800, height=800)
    view.setCameraParameters({'fov': 35, 'z': 100});

    # add sdf
    view.addModel(open('rank1_confidence-0.91.sdf').read(), "sdf")
    view.setStyle({"model": 0}, {'stick': {"color": "#ff0000"}})
    view.setViewStyle({"model": 0}, {'style': 'outline', 'color': 'black', 'width': 0.1})
    view.zoomTo()


    # add pdb
    view.addModel(open('3QPG.pdb').read(), "pdb");
    view.setStyle({"model": 1}, {"cartoon": {"color": "spectrum"}})
    view.setStyle({"model": 1, "hetflag": True}, {'stick': {"color": "spectrum"}})

    showmol(view, height=500, width=800)

def main():
    page_names_to_funcs = {"intro": intro,"pathway selection" : pathway, "protein selection" : proteins}
    mode = st.sidebar.selectbox("Choose mode",page_names_to_funcs.keys())
    page_names_to_funcs[mode]()

if __name__ == "__main__":
    main()
